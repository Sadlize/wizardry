{
  "env": {
    "jest": true,
    "browser": true,
    "commonjs": true,
    "es6": true,
    "node": true
  },
  /*
   * Configuration for JavaScript files
   */
  "extends": [
    "airbnb-base",
    "next/core-web-vitals" // Needed to avoid warning in next.js build: 'The Next.js plugin was not detected in your ESLint configuration'
  ],
  "overrides": [
    /*
     * Configuration for TypeScript files
     */
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "plugins": [
        "boundaries",
        "@typescript-eslint",
        "unused-imports",
        "simple-import-sort"
      ],
      "extends": [
        "airbnb",
        "airbnb-typescript",
        "next/core-web-vitals",
        "prettier"
      ],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": "./tsconfig.json"
      },
      "settings": {
        // FSD boundaries
        "boundaries/include": ["src/**/*"],
        "boundaries/elements": [
          {
            "type": "app",
            "pattern": "app"
          },
          {
            "type": "views",
            "pattern": "views/*",
            "capture": ["view"]
          },
          {
            "type": "widgets",
            "pattern": "widgets/*",
            "capture": ["widget"]
          },
          {
            "type": "features",
            "pattern": "features/*",
            "capture": ["feature"]
          },
          {
            "type": "entities",
            "pattern": "entities/*",
            "capture": ["entity"]
          },
          {
            "type": "shared",
            "pattern": "shared/*",
            "capture": ["segment"]
          }
        ]
      },
      "rules": {
        // FSD rules
        "boundaries/entry-point": [
          "error",
          {
            "default": "disallow",
            "message": "Absolute imports are only allowed from public api.",
            "rules": [
              {
                "target": ["shared"],
                "allow": "(*|*/index).(ts|tsx)"
              },
              {
                "target": ["app", "views", "widgets", "features", "entities"],
                "allow": "index.(ts|tsx)"
              }
            ]
          }
        ],
        "boundaries/element-types": [
          "error",
          {
            "default": "allow",
            "message": "${file.type} is not allowed to import (${dependency.type})",
            "rules": [
              {
                "from": ["shared"],
                "disallow": ["app", "views", "widgets", "features", "entities"],
                "message": "Shared module must not import upper layers (${dependency.type})"
              },
              {
                "from": ["entities"],
                "message": "Entity must not import upper layers (${dependency.type})",
                "disallow": ["app", "views", "widgets", "features"]
              },
              {
                "from": ["entities"],
                "message": "Entity must not import other entity",
                "disallow": [["entities", { "entity": "!${entity}" }]]
              },
              {
                "from": ["features"],
                "message": "Feature must not import upper layers (${dependency.type})",
                "disallow": ["app", "views", "widgets"]
              },
              {
                "from": ["features"],
                "message": "Feature must not import other feature",
                "disallow": [["features", { "feature": "!${feature}" }]]
              },
              {
                "from": ["widgets"],
                "message": "Widget must not import upper layers (${dependency.type})",
                "disallow": ["app", "views"]
              },
              {
                "from": ["widgets"],
                "message": "Widget must not import other widget",
                "disallow": [["widgets", { "widget": "!${widget}" }]]
              },
              {
                "from": ["views"],
                "message": "View(Page) must not import upper layers (${dependency.type})",
                "disallow": ["app"]
              },
              {
                "from": ["views"],
                "message": "View(Page) must not import other page",
                "disallow": [["views", { "view": "!${view}" }]]
              }
            ]
          }
        ],
        // Code style rules
        "no-console": ["error", { "allow": ["warn", "error"] }],
        "react-hooks/rules-of-hooks": "error",
        "react-hooks/exhaustive-deps": "error",
        "import/no-extraneous-dependencies": "off",
        "react/jsx-sort-props": ["error", {
          "callbacksLast": true,
          "shorthandFirst": true,
          "ignoreCase": true,
          "noSortAlphabetically": true,
          "reservedFirst": true
        }],
        "import/extensions": "off", // Avoid missing file extension errors, TypeScript already provides a similar feature
        "no-underscore-dangle": "off",
        "max-len": "off", // Disable line length checks, because the IDE is already configured to warn about it, and it's a waste of time to check for lines that are too long, especially in comments (like this one!)
        "no-unused-vars": 0, // Disabled, already handled by @typescript-eslint/no-unused-vars
        "react/destructuring-assignment": "off", // Vscode doesn't support automatically destructuring, it's a pain to add a new variable
        "react/jsx-props-no-spreading": "off", // Don't enforce, let developer choose
        "react/function-component-definition": "off", // Disable Airbnb's specific function type
        "react/prop-types": "off", // Should be handled with TS instead
        "react/require-default-props": ["error", {
          "functions": "defaultArguments"
        }],
        "react/react-in-jsx-scope": "off", // @see https://ru.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html
        "@typescript-eslint/ban-ts-comment": "warn", // ts-ignore are sometimes the only way to bypass a TS issue, we trust we will use them for good and not abuse them
        "@typescript-eslint/comma-dangle": "off", // Avoid conflict rule between Eslint and Prettier
        "@typescript-eslint/consistent-type-imports": ["error", {
          "fixStyle": "inline-type-imports"
        }], // Ensure `import type` is used when it's necessary
        "@typescript-eslint/no-explicit-any": "error",
        "no-restricted-syntax": [
          "error",
          "ForInStatement",
          "LabeledStatement",
          "WithStatement"
        ], // Overrides Airbnb configuration and enable no-restricted-syntax
        "import/prefer-default-export": "off", // Named export is easier to refactor automatically
        "simple-import-sort/imports": "error", // Import configuration for `eslint-plugin-simple-import-sort`
        "simple-import-sort/exports": "error", // Export configuration for `eslint-plugin-simple-import-sort`
        "import/order": "off", // Avoid conflict rule between `eslint-plugin-import` and `eslint-plugin-simple-import-sort`
        "unused-imports/no-unused-imports": "error",
        "unused-imports/no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }]
      }
    }
  ]
}
